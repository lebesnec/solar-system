@use "sass:math";

// Custom Theming for Angular Material
@use '@angular/material' as mat;
// For more information: https://material.angular.io/guide/theming
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$solar-system-primary: mat.define-palette(mat.$blue-palette);
$solar-system-accent: mat.define-palette(mat.$cyan-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$solar-system-warn: mat.define-palette(mat.$red-palette);

// Font
$custom-typography: mat.define-typography-config(
  $font-family: '"Exo 2", sans-serif;'
);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$solar-system-theme: mat.define-light-theme((
  color: (
    primary: $solar-system-primary,
    accent: $solar-system-accent,
    warn: $solar-system-warn,
  ),
  typography: $custom-typography
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.core($custom-typography);
@include mat.all-component-themes($solar-system-theme);

// custom global style:

// https://github.com/angular/components/issues/12803
.mat-form-field-appearance-outline {
  .mat-form-field-prefix, .mat-form-field-suffix {
    place-self: center;
    top: 0.15em !important;
  }
  .mat-form-field-infix {
    top: 0.15em !important;
    padding: 0.5em 0 1.5em 0;
  }
}

.mat-menu-panel {
  background: hsl(0, 0%, 40%);
}
@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {
  .mat-menu-panel {
    backdrop-filter: blur(10px);
    background-color: rgba(255, 255, 255, 0.3);
  }
}

.mat-menu-item {
  color: white;
  min-width: 150px;
  padding-left: 30px;
}

.mat-menu-item:hover:not([disabled]) {
  background: rgba(0, 0, 0, 0.09);
}

// helper to convert a color to a css filter, to easily change the color af svg element
// See https://stackoverflow.com/a/68034320/990193
@mixin recolor($color: #000) {
  $r: math.div(red($color), 255);
  $g: math.div(green($color), 255);
  $b: math.div(blue($color), 255);
  $a: alpha($color);

  // grayscale fallback if SVG from data url is not supported
  $lightness: lightness($color);
  filter: saturate(0%) brightness(0%) invert($lightness) opacity($a);

  // color filter
  $svg-filter-id: "recolor";
  filter: url('data:image/svg+xml;utf8,\
  <svg xmlns="http://www.w3.org/2000/svg">\
    <filter id="#{$svg-filter-id}" color-interpolation-filters="sRGB">\
      <feColorMatrix type="matrix" values="\
       0 0 0 0 #{$r}\
       0 0 0 0 #{$g}\
       0 0 0 0 #{$b}\
       0 0 0 #{$a} 0\
      "/>\
    </filter>\
  </svg>\
  ##{$svg-filter-id}');
}
